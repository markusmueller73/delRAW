;  * deleteRAWimages (delRAW);  *;  * window.pbi;  *;  * Copyright 2021 by Markus Mueller <markus.mueller.73@hotmail.de>;  *;  * license details see in 'main.pb';--------------------------------------------------------------------------------;- window & menu constantsEnumeration WINDOWS 1    #WND_MAIN    #WND_PROGRESS    #WND_ABOUT    #MNU_MAIN    CompilerIf #PB_Compiler_OS = #PB_OS_MacOS        #MNU_FILE_PREFS = #PB_Menu_Preferences        #MNU_FILE_QUIT  = #PB_Menu_Quit        #MNU_HELP_ABOUT = #PB_Menu_About    CompilerElse        #MNU_FILE_PREFS        #MNU_FILE_QUIT        #MNU_HELP_ABOUT    CompilerEndIfEndEnumeration#WND_MAIN_WIDTH     = 700#WND_MAIN_HEIGHT    = 600;--------------------------------------------------------------------------------;- gadget constantsEnumeration GADGETS 1    #MAIN_CNT_PATH    #MAIN_TXT_PATH_JPG    #MAIN_TXT_PATH_RAW    #MAIN_TXT_EXT_RAW    #MAIN_STR_PATH_JPG    #MAIN_STR_PATH_RAW    #MAIN_CMB_EXT_RAW    #MAIN_BTN_PATH_JPG    #MAIN_BTN_PATH_RAW    #MAIN_CNT_RESULT    #MAIN_TXT_RESULT    #MAIN_LST_RESULT    #MAIN_TXT_EQUAL    #MAIN_TXT_ONLY_JPG    #MAIN_TXT_ONLY_RAW    #MAIN_CNT_BUTTONS    #MAIN_BTN_COMPARE    #MAIN_BTN_DELETEEndEnumerationEnumeration LIST_COLUMNS    #COL_PREVIEW = 1    #COL_RAWEndEnumeration#COLOR_GREEN    = $228B22#COLOR_RED      = $2222B2#COLOR_BLUE     = $FF901E;--------------------------------------------------------------------------------;- main window structureStructure MENU_CHECKBOXES    id.i    itm_select_all.i    itm_select_prev.i    itm_select_raw.i    itm_select_none.i    itm_select_both.iEndStructureStructure WINDOW_MAIN    id.i    mnu_select.MENU_CHECKBOXES    cnt_path.i    txt_path_pre.i    txt_path_raw.i    txt_ext_raw.i    str_path_pre.i    str_path_raw.i    cmb_ext_raw.i    btn_path_pre.i    btn_path_raw.i    cnt_result.i    txt_result.i    lst_result.i    txt_equal.i    txt_only_pre.i    txt_only_raw.i    cnt_buttons.i    btn_check.i    btn_compare.i    btn_delete.iEndStructureStructure WINDOW_PROGRESS    id.i    txt_del_msg.i    txt_del_file.i    bar_progress.i    btn_cancel.iEndStructure;--------------------------------------------------------------------------------;- functionsProcedure.l OLD_get_raw_ext( gadget.i , List ext.s() )        Protected.l n    Protected.s item        If GetGadgetState(gadget) < 0        warn("no item in gadget #" + Str(gadget) + " selected.")        ProcedureReturn -1    EndIf        item = PeekS(GetGadgetItemData(gadget, GetGadgetState(gadget)))        If ListSize(ext()) > 0        warn("extension list isn't empty.")        ClearList(ext()) : info("extension list cleared.")    EndIf        For n = 1 To CountString(item, ",")        AddElement(ext())        ext() = StringField(item, n, ",") : Debug ext()    Next        ProcedureReturn n + 1    EndProcedureProcedure.l get_raw_ext( gadget.i , List ext.s() )        Protected.l item, n, m        item = GetGadgetState(gadget)        If item = -1        warn("no item in gadget #" + Str(gadget) + " selected.")        ProcedureReturn -1    EndIf        If ListSize(ext()) > 0        warn("extension list isn't empty.")        ClearList(ext()) : info("extension list cleared.")    EndIf        NewList exts.RAW_FILE_EXTENSIONS()    If get_raw_ext_list(exts())        ForEach exts()            If exts()\id = item                CopyList(exts()\file_ext(), ext())                Break            EndIf        Next    EndIf    FreeList(exts())        ProcedureReturn ListSize(ext())    EndProcedureProcedure.l set_menu_item_state( *m.MENU_CHECKBOXES , new_item.i )        Protected.l n        If Not IsMenu(*m\id)        ProcedureReturn 0    EndIf        For n = *m\itm_select_none To *m\itm_select_all        SetMenuItemState(*m\id, n, #False)    Next        SetMenuItemState(*m\id, new_item, #True)        ProcedureReturn 1    EndProcedureProcedure.l main_window_open( *w.WINDOW_MAIN , x.l = #PB_Ignore , y.l = #PB_Ignore )        Protected.s title = #APP_NAME + " v" + Str(#APP_MAJOR) + "." + Str(#APP_MINOR), entry, entry_raw    Protected.l n, gx, gy, flags = #PB_Window_SystemMenu | #PB_Window_MinimizeGadget | #PB_Window_Invisible    Protected.i entry_data, ico_folder = CatchImage(#PB_Any, ?ICON_FOLDER)        *w\id = OpenWindow(#PB_Any, x, y, #WND_MAIN_WIDTH, #WND_MAIN_HEIGHT, title, flags)    If IsWindow(*w\id)                With *w                        \cnt_path = ContainerGadget(#PB_Any, 0, 0, WindowWidth(\id), 120)            If IsGadget(\cnt_path)                                \txt_path_pre = TextGadget(#PB_Any,    10, 10, 200, 25, "Vorschaubilder (JPG oder TIF):")                \str_path_pre = StringGadget(#PB_Any, 220, 10, 400, 25, "", #PB_String_ReadOnly)                \btn_path_pre = ButtonImageGadget(#PB_Any, 640, 5,  50, 35, ImageID(ico_folder))                                \txt_path_raw = TextGadget(#PB_Any,    10, 45, 200, 25, "RAW Dateien:")                \str_path_raw = StringGadget(#PB_Any, 220, 45, 400, 25, "", #PB_String_ReadOnly)                \btn_path_raw = ButtonImageGadget(#PB_Any, 640, 40,  50, 35, ImageID(ico_folder))                                \txt_ext_raw = TextGadget(#PB_Any,      10, 80, 300, 25, "Datei Erweiterung der RAW Dateien:")                \cmb_ext_raw = ComboBoxGadget(#PB_Any, 320, 80, 300, 25)                                CloseGadgetList()            Else                ProcedureReturn 0            EndIf                        \cnt_buttons = ContainerGadget(#PB_Any, 0, WindowHeight(\id)-50, WindowWidth(\id), 50)            If IsGadget(\cnt_buttons)                                \btn_check = ButtonGadget(#PB_Any, 20, 10, 120, 30, "Dateien markieren")                \btn_compare = ButtonGadget(#PB_Any, GadgetWidth(\cnt_buttons)-180, 10, 170, 30, "Verzeichnisse vergleichen")                \btn_delete = ButtonGadget(#PB_Any, GadgetX(\btn_compare)-20-180, 10, 170, 30, "Gewählte Dateien löschen")                                DisableGadget(\btn_compare, #True)                DisableGadget(\btn_delete, #True)                                CloseGadgetList()                            Else                ProcedureReturn 0            EndIf                        \cnt_result = ContainerGadget(#PB_Any, 0, GadgetHeight(\cnt_path), WindowWidth(\id), WindowHeight(\id) - GadgetHeight(\cnt_path) - GadgetHeight(\cnt_buttons))            If IsGadget(\cnt_result)                                \txt_result = TextGadget(#PB_Any, 10, 10, 300, 25, "Ergebnis der Verzeichnissuche:")                                \lst_result = ListIconGadget(#PB_Any, 10, 45, GadgetWidth(\cnt_result)-20, GadgetHeight(\cnt_result)-80, "Löschen", 40, #PB_ListIcon_GridLines|#PB_ListIcon_CheckBoxes)                                AddGadgetColumn(\lst_result, #COL_PREVIEW, "Vorschau Dateien", 310)                AddGadgetColumn(\lst_result, #COL_RAW    , "RAW Dateien", 310)                                \txt_equal    = TextGadget(#PB_Any,  10, GadgetHeight(\cnt_result)-30, 225, 25, "Vorschau und RAW Datei vorhanden", #PB_Text_Center)                \txt_only_pre = TextGadget(#PB_Any, 235, GadgetHeight(\cnt_result)-30, 230, 25, "nur Vorschau Datei vorhanden", #PB_Text_Center)                \txt_only_raw = TextGadget(#PB_Any, 460, GadgetHeight(\cnt_result)-30, 225, 25, "nur RAW Datei vorhanden", #PB_Text_Center)                                SetGadgetColor(\txt_equal,    #PB_Gadget_FrontColor, #COLOR_GREEN)                SetGadgetColor(\txt_only_pre, #PB_Gadget_FrontColor, #COLOR_RED)                SetGadgetColor(\txt_only_raw, #PB_Gadget_FrontColor, #COLOR_BLUE)                                CloseGadgetList()                            Else                ProcedureReturn 0            EndIf                        \mnu_select\id = CreatePopupMenu(#PB_Any)            If IsMenu(\mnu_select\id)                                \mnu_select\itm_select_none = 101                \mnu_select\itm_select_raw  = \mnu_select\itm_select_none + 1                \mnu_select\itm_select_prev = \mnu_select\itm_select_none + 2                \mnu_select\itm_select_both = \mnu_select\itm_select_none + 3                \mnu_select\itm_select_all  = \mnu_select\itm_select_none + 4                                MenuItem(\mnu_select\itm_select_none, "Keine Zeile markieren")                MenuItem(\mnu_select\itm_select_raw, "Nur Zeilen markieren, wo nur die RAW Datei vorhanden ist")                MenuItem(\mnu_select\itm_select_prev, "Nur Zeilen markieren, wo nur die Vorschau Datei vorhanden ist")                MenuItem(\mnu_select\itm_select_both, "Nur Zeilen markieren, wo beide Dateien vorhanden sind")                MenuItem(\mnu_select\itm_select_all, "Alle Zeilen markieren")                                SetMenuItemState(\mnu_select\id, \mnu_select\itm_select_raw, #True)                            Else                ProcedureReturn 0            EndIf                        NewList exts.RAW_FILE_EXTENSIONS()            If get_raw_ext_list(exts())                                entry_data = 0                                ForEach exts()                                        entry = exts()\manufacturer + " ("                    entry_raw = #Null$                                        ForEach exts()\file_ext()                                                entry + "*." + exts()\file_ext() + ", "                        entry_raw + exts()\file_ext() + ","                                            Next;=ForEach exts()\file_ext()                                        entry = Mid(entry, 1, Len(entry)-2) + ")"                                        AddGadgetItem(\cmb_ext_raw, exts()\id, entry)                    SetGadgetItemData(\cmb_ext_raw, exts()\id, @entry_raw)                                        entry_data + 1                                    Next;=ForEach exts()                            EndIf            FreeList(exts())                        HideWindow(\id, #False)                    EndWith        Else        ProcedureReturn #False    EndIf        ProcedureReturn #True    EndProcedureProcedure.l progress_window_open ( main_wnd.i , *w.WINDOW_PROGRESS , progress_max.l = 100 )        If *w = 0        ProcedureReturn 0    EndIf        With *w                \id = OpenWindow(#PB_Any, 0, 0, 400, 200, "Lösche Dateien"+"...", #PB_Window_Tool | #PB_Window_WindowCentered, WindowID(main_wnd))        If IsWindow(\id)                        \txt_del_msg = TextGadget(#PB_Any, 10, 10, 380, 25, "Lösche Datei"+":")            \txt_del_file = TextGadget(#PB_Any, 10, 45, 380, 50, "")                        \bar_progress = ProgressBarGadget(#PB_Any, 10, 110, 380, 30, 0, progress_max, #PB_ProgressBar_Smooth)                        ;\btn_cancel = ButtonGadget(#PB_Any, 150, 160, 100, 30, "Abbrechen")                    Else            ProcedureReturn 0        EndIf            EndWith        ProcedureReturn *w\id    EndProcedure; IDE Options = PureBasic 6.04 LTS (Windows - x64); CursorPosition = 333; FirstLine = 288; Folding = --; Optimizer; EnableXP; UseMainFile = main.pb; EnablePurifier; EnableCompileCount = 0; EnableBuildCount = 0; EnableExeConstant