;  * deleteRAWimages (delRAW);  *;  * main.pb;  *;  * Copyright 2020 by Markus Mueller <markus.mueller.73@hotmail.de>;  *;  * This program is free software; you can redistribute it and/or modify;  * it under the terms of the GNU General Public License As published by;  * the Free Software Foundation; either version 2 of the License, or;  * (at your option) any later version.;  *;  * This program is distributed in the hope that it will be useful,;  * but WITHOUT ANY WARRANTY; without even the implied warranty of;  * MERCHANTABILITY or FITNESS for A PARTICULAR PURPOSE.  See the;  * GNU General Public License for more details.;  *;  * You should have received a copy of the GNU General Public License;  * along with this program; if not, write to the Free Software;  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,;  * MA 02110-1301, USA.;  *;--------------------------------------------------------------------------------;- set environmentEnableExplicitXIncludeFile "header.pbi";--------------------------------------------------------------------------------;- declarationsDeclare.l main( );--------------------------------------------------------------------------------;- mainDefine.l RESULT = main();--------------------------------------------------------------------------------;- endEnd RESULT;--------------------------------------------------------------------------------;- functionProcedure.l main()        info("Starting " + #APP_NAME + " v" + Str(#APP_MAJOR) + "." + Str(#APP_MINOR) + "." + Str(#APP_MICRO))        Protected.l n, m, quit, mnu_item, cur_selection = #SELECT_RAW, app_state = #STATE_PREPARE    Protected.s preview_dir, raw_dir    Protected   wnd.WINDOW_MAIN    Protected   config._CONFIG        NewList raw_dir.s()    NewList raw_ext.s()    NewList preview_ext.s()    NewList preview_content.s()    NewList raw_content.s()    NewList compare_result.COMPARE_RESULT()    NewList to_delete.FILES_TO_DELETE()        Macro select_selection ( new_item )        Select new_item            Case wnd\mnu_select\itm_select_all  : cur_selection = #SELECT_ALL_ROWS            Case wnd\mnu_select\itm_select_both : cur_selection = #SELECT_BOTH            Case wnd\mnu_select\itm_select_prev : cur_selection = #SELECT_PREVIEW            Case wnd\mnu_select\itm_select_raw  : cur_selection = #SELECT_RAW            Case wnd\mnu_select\itm_select_none : cur_selection = #SELECT_NONE            Default                             : cur_selection = #SELECT_ALL_ROWS        EndSelect    EndMacro        Restore RAW_DIRECTORIES    Read.l m    For n = 1 To m        AddElement(raw_dir())        Read.s raw_dir()    Next;=For n = 1 To m    n = 0 : m = 0        Restore PREVIEW_EXTENSIONS    Read.l m    For n = 1 To m        AddElement(preview_ext())        Read.s preview_ext()    Next;=For n = 1 To m    n = 0 : m = 0        If main_window_open(@wnd) = 0        err("Can't open main window")        End 1    EndIf        set_menu_item_state(@wnd\mnu_select, wnd\mnu_select\itm_select_raw)        If load_config(@config)        SetGadgetState(wnd\cmb_ext_raw, config\raw_ext)        get_raw_ext(wnd\cmb_ext_raw, raw_ext())        If config\last_raw_dir            SetGadgetText(wnd\str_path_raw, config\last_raw_dir)            raw_dir = config\last_raw_dir        EndIf        If config\last_prev_dir            SetGadgetText(wnd\str_path_pre, config\last_prev_dir)            preview_dir = config\last_prev_dir        EndIf    Else        MessageRequester(#APP_NAME, "Es könnte sich um den ersten Start handeln, bitte wähle zuerst den Typ der RAW Dateien im Auswahlfeld aus.", #PB_MessageRequester_Info)    EndIf        Repeat                Select WaitWindowEvent()                            Case #PB_Event_CloseWindow                                Select EventWindow()                    Case wnd\id : quit = 1                    Default                        ;                EndSelect                            Case #PB_Event_Menu                                mnu_item = EventMenu()                Select mnu_item                                            Case wnd\mnu_select\itm_select_all, wnd\mnu_select\itm_select_prev, wnd\mnu_select\itm_select_raw, wnd\mnu_select\itm_select_none, wnd\mnu_select\itm_select_both                                                set_menu_item_state(@wnd\mnu_select, mnu_item) : select_selection(mnu_item)                                                If CountGadgetItems(wnd\lst_result) > 0                                                        For n = 0 To CountGadgetItems(wnd\lst_result)-1                                                                Select cur_selection                                    Case #SELECT_ALL_ROWS                                        SetGadgetItemState(wnd\lst_result, n, #PB_ListIcon_Checked)                                                                            Case #SELECT_BOTH                                        If GetGadgetItemText(wnd\lst_result, n, #COL_PREVIEW) And GetGadgetItemText(wnd\lst_result, n, #COL_RAW)                                            SetGadgetItemState(wnd\lst_result, n, #PB_ListIcon_Checked)                                        Else                                            SetGadgetItemState(wnd\lst_result, n, 0)                                        EndIf                                                                            Case #SELECT_PREVIEW                                        If GetGadgetItemText(wnd\lst_result, n, #COL_PREVIEW) And GetGadgetItemText(wnd\lst_result, n, #COL_RAW) = #Null$                                            SetGadgetItemState(wnd\lst_result, n, #PB_ListIcon_Checked)                                        Else                                            SetGadgetItemState(wnd\lst_result, n, 0)                                        EndIf                                                                            Case #SELECT_RAW                                        If GetGadgetItemText(wnd\lst_result, n, #COL_PREVIEW) = #Null$ And GetGadgetItemText(wnd\lst_result, n, #COL_RAW)                                            SetGadgetItemState(wnd\lst_result, n, #PB_ListIcon_Checked)                                        Else                                            SetGadgetItemState(wnd\lst_result, n, 0)                                        EndIf                                                                            Case #SELECT_NONE                                        SetGadgetItemState(wnd\lst_result, n, 0)                                                                        EndSelect                                                            Next                                                    EndIf                                            Default                                                dbg("Unknown menuitem #" + Str(mnu_item))                                        EndSelect                            Case #PB_Event_Gadget                                Select EventGadget()                                            Case wnd\btn_path_pre                                                If preview_dir = #Null$                            preview_dir = PathRequester("Wähle einen Pfad für die Vorschau Bilder aus:", GetUserDirectory(#PB_Directory_Pictures))                        Else                            preview_dir = PathRequester("Wähle einen Pfad für die Vorschau Bilder aus:", preview_dir)                        EndIf                                                If preview_dir <> #Null$ And FileSize(preview_dir) = -2                                                        check_for_ps(preview_dir)                            SetGadgetText(wnd\str_path_pre, preview_dir)                            config\last_prev_dir = preview_dir                                                        ForEach raw_dir()                                If FileSize(preview_dir + raw_dir()) = -2                                    raw_dir = preview_dir + raw_dir() + #PS$                                    SetGadgetText(wnd\str_path_raw, raw_dir)                                    config\last_raw_dir = raw_dir                                    Break                                EndIf                            Next                                                    EndIf                                                ClearGadgetItems(wnd\lst_result)                        app_state = #STATE_PREPARE                                            Case wnd\btn_path_raw                                                If preview_dir = #Null$ And raw_dir = #Null$                            raw_dir = PathRequester("Wähle einen Pfad für die RAW Bilder aus:", GetUserDirectory(#PB_Directory_Pictures))                        ElseIf raw_dir = #Null$                            raw_dir = PathRequester("Wähle einen Pfad für die RAW Bilder aus:", preview_dir)                        Else                            raw_dir = PathRequester("Wähle einen Pfad für die RAW Bilder aus:", raw_dir)                        EndIf                                                If raw_dir <> #Null$                            SetGadgetText(wnd\str_path_raw, raw_dir)                            config\last_raw_dir = raw_dir                        EndIf                                                ClearGadgetItems(wnd\lst_result)                        app_state = #STATE_PREPARE                                            Case wnd\btn_check                                                DisplayPopupMenu(wnd\mnu_select\id, WindowID(wnd\id), GadgetX(wnd\btn_check, #PB_Gadget_ScreenCoordinate), GadgetY(wnd\btn_check, #PB_Gadget_ScreenCoordinate))                                            Case wnd\btn_compare                                                check_dir(preview_dir, preview_ext(), preview_content())                        check_dir(raw_dir, raw_ext(), raw_content())                                                If compare_dirs(preview_content(), raw_content(), compare_result())                                                        ClearGadgetItems(wnd\lst_result)                            n = 0                                                        ForEach compare_result()                                                                AddGadgetItem(wnd\lst_result, n, "" + Chr(10) + compare_result()\preview_file + Chr(10) + compare_result()\raw_file)                                SetGadgetItemData(wnd\lst_result, n, compare_result()\result)                                                                Select compare_result()\result                                    Case #COMPARE_BOTH_EXIST                                        SetGadgetItemColor(wnd\lst_result, n, #PB_Gadget_FrontColor, #COLOR_GREEN)                                                                            Case #COMPARE_NO_PREVIEW                                        SetGadgetItemColor(wnd\lst_result, n, #PB_Gadget_FrontColor, #COLOR_BLUE)                                        SetGadgetItemState(wnd\lst_result, n, #PB_ListIcon_Checked)                                                                            Case #COMPARE_NO_RAW                                        SetGadgetItemColor(wnd\lst_result, n, #PB_Gadget_FrontColor, #COLOR_RED)                                                                            Default                                        ;                                EndSelect                                                                n + 1                                                            Next                                                        app_state = #STATE_DELETE                                                    EndIf                                            Case wnd\btn_delete                                                n = delete_files(wnd\id, wnd\lst_result)                        MessageRequester(#APP_NAME, "Deteted " + Str(n) + " files.", #PB_MessageRequester_Info)                                                ClearGadgetItems(wnd\lst_result)                        app_state = #STATE_PREPARE                                            Case wnd\cmb_ext_raw                                                get_raw_ext(wnd\cmb_ext_raw, raw_ext())                        config\raw_ext = GetGadgetState(wnd\cmb_ext_raw)                                        EndSelect                            Default                ;                        EndSelect                If GetGadgetText(wnd\str_path_raw) And GetGadgetText(wnd\str_path_pre) And GetGadgetText(wnd\cmb_ext_raw)            If app_state = #STATE_PREPARE                EnableGadget(wnd\btn_compare)                DisableGadget(wnd\btn_delete, #True)                app_state = #STATE_COMPARE            ElseIf app_state = #STATE_DELETE                DisableGadget(wnd\btn_compare, #True)                EnableGadget(wnd\btn_delete)            EndIf        Else            DisableGadget(wnd\btn_compare, #True)            DisableGadget(wnd\btn_delete, #True)        EndIf            Until quit = 1        FreeList(raw_dir())    FreeList(raw_ext())    FreeList(preview_ext())    FreeList(raw_content())    FreeList(preview_content())    FreeList(compare_result())    FreeList(to_delete())        config\last_raw_dir = GetGadgetText(wnd\str_path_raw)    config\last_prev_dir = GetGadgetText(wnd\str_path_pre)        save_config(@config)        info(#APP_NAME + " closed successfully.")        ProcedureReturn 0    EndProcedure; IDE Options = PureBasic 6.04 LTS (Windows - x64); CursorPosition = 118; FirstLine = 109; Folding = -; Optimizer; EnableThread; EnableXP; UseIcon = deRAW_icon.ico; EnablePurifier; EnableCompileCount = 12; EnableBuildCount = 0; EnableExeConstant