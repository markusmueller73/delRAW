;  * deleteRAWimages (delRAW);  *;  * header.pbi;  *;  * Copyright 2021 by Markus Mueller <markus.mueller.73@hotmail.de>;  *;  * license details see in 'main.pb';--------------------------------------------------------------------------------;- set environmentCompilerIf #PB_Compiler_IsMainFile    EnableExplicitCompilerEndIfUseJPEGImageDecoder()UsePNGImageDecoder()UseTGAImageDecoder()UseTIFFImageDecoder();--------------------------------------------------------------------------------;- missing constants#PB_FileSize_is_Empty       = 0#PB_FileSize_Not_Found      = -1#PB_FileSize_is_Directory   = -2;--------------------------------------------------------------------------------;- application constants#APP_USE_WINAPI = 1#APP_NAME   = "deleteRAWimages"#APP_SHORT  = "delraw"#APP_MAJOR  = 0#APP_MINOR  = 3#APP_MICRO  = #PB_Editor_BuildCount#APP_LOG    = #APP_SHORT + ".log";--------------------------------------------------------------------------------;- OS depended constantsCompilerIf #PB_Compiler_OS = #PB_OS_Windows        #NL$ = #CRLF$    #APP_CONFIG = #APP_short + ".ini"    #APP_SAVE_PATH = "AppData\Local\" + #APP_NAME + #PS$    CompilerElseIf #PB_Compiler_OS = #PB_OS_MacOS        #NL$ = #CR$    #APP_CONFIG = #APP_SHORT + ".conf"    #APP_SAVE_PATH = "Library/Application Support/" + #APP_NAME + #PS$    CompilerElse        #NL$ = #LF$    #APP_CONFIG = #APP_SHORT + ".conf"    #APP_SAVE_PATH = ".config/" + #APP_NAME + #PS$    CompilerEndIf;--------------------------------------------------------------------------------;- data constantsEnumeration 0    #DISABLED    #ENABLEDEndEnumeration;--------------------------------------------------------------------------------;- logging constantsEnumeration LOGTYPE 1    #LOGTYPE_INFO    #LOGTYPE_WARNING    #LOGTYPE_ERROR    #LOGTYPE_DEBUGEndEnumerationEnumeration COMPARE_RESULTS    #COMPARE_BOTH_EXIST    #COMPARE_NO_PREVIEW    #COMPARE_NO_RAWEndEnumerationEnumeration SELECTION_RESULTS    #SELECT_NONE    #SELECT_PREVIEW    #SELECT_RAW    #SELECT_BOTH    #SELECT_ALL_ROWSEndEnumerationEnumeration APP_STATE    #STATE_PREPARE    #STATE_COMPARE    #STATE_DELETEEndEnumeration#STATE_DONE = #STATE_PREPARE;--------------------------------------------------------------------------------;- structuresStructure RAW_FILE_EXTENSIONS    id.l    manufacturer.s    List file_ext.s()EndStructureStructure COMPARE_RESULT    result.l    preview_file.s    raw_file.sEndStructureStructure FILES_TO_DELETE    CompilerIf #PB_Compiler_OS = #PB_OS_Windows        deleted.l    CompilerEndIf    path.s    file.sEndStructureStructure _CONFIG    raw_ext.l    last_prev_dir.s    last_raw_dir.sEndStructure;--------------------------------------------------------------------------------;- global functionsProcedure logger( message.s , type.b )        Protected.i h_log    Protected.s text        Select type        Case #LOGTYPE_INFO    : text = "[INFO]" + Space(1)        Case #LOGTYPE_WARNING : text = "[WARNING]" + Space(1)        Case #LOGTYPE_ERROR   : text = "[ERROR]" + Space(1)        Case #LOGTYPE_DEBUG   : text = "[DEBUG]" + Space(1)    EndSelect        Debug text + message    CompilerIf #PB_Compiler_Debugger ;- logging with debugger spams the logfile ;-)        If FileSize(GetHomeDirectory() + #APP_SAVE_PATH) = -1            CreateDirectory(GetHomeDirectory() + #APP_SAVE_PATH)        EndIf        h_log = OpenFile(#PB_Any, GetHomeDirectory() + #APP_SAVE_PATH + #APP_LOG)        FileSeek(h_log, Lof(h_log))        WriteStringN(h_log, FormatDate("[%yy-%mm-%dd %hh:%ii:%ss]  ", Date()) + text + message)        CloseFile(h_log)    CompilerElse ;- logging without debugger only print warnings and errors        If type = #LOGTYPE_WARNING Or type = #LOGTYPE_ERROR            If FileSize(GetHomeDirectory() + #APP_SAVE_PATH) = -1                CreateDirectory(GetHomeDirectory() + #APP_SAVE_PATH)            EndIf            h_log = OpenFile(#PB_Any, GetHomeDirectory() + #APP_SAVE_PATH + #APP_LOG)            FileSeek(h_log, Lof(h_log))            WriteStringN(h_log, FormatDate("[%yy-%mm-%dd %hh:%ii:%ss]  ", Date()) + text + message)            CloseFile(h_log)            If type = #LOGTYPE_ERROR                MessageRequester(#APP_NAME, "An error occured:" + #CRLF$ + message, #PB_MessageRequester_Error)            EndIf        EndIf    CompilerEndIfEndProcedureProcedure.l get_raw_ext_list( List l.RAW_FILE_EXTENSIONS() )        Protected.l i, j, k, nb    Protected.s m, n        Restore RAW_EXTENSIONS        Read.l k        For i = 0 To k-1                AddElement(l())                Read.s m        Read.s n : nb = Val(n)                l()\manufacturer = m                For j = 0 To nb-1            AddElement(l()\file_ext())            Read.s n            l()\file_ext() = LCase(n)        Next            Next        SortStructuredList(l(), #PB_Sort_Ascending, OffsetOf(RAW_FILE_EXTENSIONS\manufacturer), #PB_String)        i = 0    ForEach l()        l()\id = i        i + 1    Next        ProcedureReturn k    EndProcedureProcedure EnableGadget(Gadget.i)    If IsGadget(Gadget)        DisableGadget(Gadget, #False)    EndIfEndProcedure;--------------------------------------------------------------------------------;- global macrosMacro info( msg ) : logger("<" + #PB_Compiler_Procedure + "> : " + msg, #LOGTYPE_INFO) : EndMacroMacro warn( msg ) : logger("<" + #PB_Compiler_Procedure + "> : " + msg, #LOGTYPE_WARNING) : EndMacroMacro err( msg ) : logger("<" + #PB_Compiler_Procedure + "> : " + msg, #LOGTYPE_ERROR) : EndMacroMacro dbg( msg )  : logger("<" + #PB_Compiler_Procedure + "> : " + msg, #LOGTYPE_DEBUG) : EndMacroMacro check_for_ps( directory )    If Right(directory, 1) <> #PS$        directory + #PS$    EndIfEndMacro;--------------------------------------------------------------------------------;- includesXIncludeFile "preferences.pbi"XIncludeFile "window.pbi"XIncludeFile "compare_dirs.pbi";--------------------------------------------------------------------------------;- dataDataSection    RAW_EXTENSIONS:    Data.l 9    Data.s "Adobe Inc. Digital Negative", "1", "dng"    Data.s "Canon", "5", "tif", "crw", "cr2", "cr3", "cr4"    Data.s "Fujifilm", "1", "raf"    Data.s "Kodak", "4", "dcr", "dcs", "kdc", "raw"    Data.s "Leica Camera", "3", "raw", "dng", "rwl"    Data.s "Nikon", "2", "nef", "nrw"    Data.s "Olympus", "2", "orf", "ori"    Data.s "Panasonic", "2", "raw", "rw2"    Data.s "Sony", "3", "arw", "srf", "sr2"    PREVIEW_EXTENSIONS:    Data.l 5    Data.s "jpg", "jpeg", "jpe", "tif", "tiff"    RAW_DIRECTORIES:    Data.l 4    Data.s "RAW", "raw", "_RAW", "_raw", "_RAW_", "_raw_"    CompilerIf #PB_Compiler_OS = #PB_OS_Windows        ICON_FOLDER:        IncludeBinary "..\res\folder_blue_32.png"        ICON_FOLDER_64:        IncludeBinary "..\res\folder_blue_64.png"    CompilerElse        ICON_FOLDER:        IncludeBinary "../res/folder_blue_32.png"        ICON_FOLDER_64:        IncludeBinary "../res/folder_blue_64.png"    CompilerEndIfEndDataSection; IDE Options = PureBasic 6.04 LTS (Windows - x64); CursorPosition = 29; Folding = ---; Optimizer; EnableXP; UseMainFile = main.pb; EnablePurifier; EnableCompileCount = 0; EnableBuildCount = 0; EnableExeConstant